import platform
import subprocess
import re

# Get kernel information
kernel_info = platform.uname()
print("Kernel Information:")
print("    System: {}".format(kernel_info.system))
print("    Node Name: {}".format(kernel_info.node))
print("    Release: {}".format(kernel_info.release))
print("    Version: {}".format(kernel_info.version))
print("    Machine: {}".format(kernel_info.machine))
print("    Processor: {}".format(kernel_info.processor))
print("==========================================================")

print("Service Information:")
# Define a list of service package names
services = [ "sudo", "polkitd", "apache2", "nginx"]
services2 = {
    "OpenSSH": "ssh -V",
    "BIND DNS": "named -v",
    "Samba": "samba -V",
    "vsftpd": "vsftpd -v",
    "MySql": "mysql -V",
    "Postgres": "psql -V",
    "php": "php -v",
}

installed_service_versions = {}
failed_service_versions = {}

# Execute the dpkg command to retrieve the package information for each service
for service in services:
    try:
        output = subprocess.check_output(["dpkg", "-s", service], stderr=subprocess.STDOUT)
        version_info = [line for line in output.decode().split('\n') if line.startswith("Version:")]
        if version_info:
            #service_version = version_info[0].split(":")[1].strip()
            service_version = re.search(r"^Version:\s*(.*)", version_info[0]).group(1).strip()
            installed_service_versions[service] = service_version
        else:
            failed_service_versions[service] = "Not found"
    except subprocess.CalledProcessError as e:
        failed_service_versions[service] = "Not Installed"
        
for service, command in services2.items():
    try:
        output = subprocess.check_output(command.split(), stderr=subprocess.STDOUT)
        if service == "OpenSSH":
            version_str = re.search(r"OpenSSH_[\d\.p]+", output.decode()).group(0)
        else:
            version = output.decode().strip().split('\n')[0].split()[1:]
            if version:
                version_str = ' '.join(version)
            else:
                raise ValueError("Version information not found")
        installed_service_versions[service] = version_str
    except subprocess.CalledProcessError as e:
        failed_service_versions[service] = "Not Installed"
    except FileNotFoundError:
        failed_service_versions[service] = "Not Installed"

# Print the version of all installed services first

for service, version in installed_service_versions.items():
    print("{:20} version: {}".format(service, version))

# Print the version of all failed services (if any)
if failed_service_versions:
    print("\nFailed services:")
    for service, error in failed_service_versions.items():
        print("{} error: {}".format(service, error))
else:
    print("\nAll services were found to be installed.")
